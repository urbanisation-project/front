/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AdPayload } from '../model/adPayload';
import { AdSetPayload } from '../model/adSetPayload';
import { AdvertiserPayload } from '../model/advertiserPayload';
import { CampaignPayload } from '../model/campaignPayload';
import { Credentials } from '../model/credentials';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AdvertiserControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param adId 
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addImageToAdForm(adId: number, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addImageToAdForm(adId: number, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addImageToAdForm(adId: number, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addImageToAdForm(adId: number, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (adId === null || adId === undefined) {
            throw new Error('Required parameter adId was null or undefined when calling addImageToAd.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) as any || formParams;
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/api/advertisers/ads/${encodeURIComponent(String(adId))}`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticate1(body: Credentials, observe?: 'body', reportProgress?: boolean): Observable<AdvertiserPayload>;
    public authenticate1(body: Credentials, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdvertiserPayload>>;
    public authenticate1(body: Credentials, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdvertiserPayload>>;
    public authenticate1(body: Credentials, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling authenticate1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AdvertiserPayload>('post',`${this.basePath}/v1/api/advertisers/authenticate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param adSetId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdSetAds(adSetId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AdPayload>>;
    public getAdSetAds(adSetId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AdPayload>>>;
    public getAdSetAds(adSetId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AdPayload>>>;
    public getAdSetAds(adSetId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (adSetId === null || adSetId === undefined) {
            throw new Error('Required parameter adSetId was null or undefined when calling getAdSetAds.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AdPayload>>('get',`${this.basePath}/v1/api/advertisers/ad-sets/${encodeURIComponent(String(adSetId))}/ads`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param adId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdVisitorsCount(adId: number, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public getAdVisitorsCount(adId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public getAdVisitorsCount(adId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public getAdVisitorsCount(adId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (adId === null || adId === undefined) {
            throw new Error('Required parameter adId was null or undefined when calling getAdVisitorsCount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<number>('get',`${this.basePath}/v1/api/advertisers/campaigns/ads/${encodeURIComponent(String(adId))}/visitors/count`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param advertiserId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAdvertiserCampaigns(advertiserId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<CampaignPayload>>;
    public getAdvertiserCampaigns(advertiserId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CampaignPayload>>>;
    public getAdvertiserCampaigns(advertiserId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CampaignPayload>>>;
    public getAdvertiserCampaigns(advertiserId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (advertiserId === null || advertiserId === undefined) {
            throw new Error('Required parameter advertiserId was null or undefined when calling getAdvertiserCampaigns.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<CampaignPayload>>('get',`${this.basePath}/v1/api/advertisers/${encodeURIComponent(String(advertiserId))}/campaigns`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param campaignId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCampaignAdSets(campaignId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<AdSetPayload>>;
    public getCampaignAdSets(campaignId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AdSetPayload>>>;
    public getCampaignAdSets(campaignId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AdSetPayload>>>;
    public getCampaignAdSets(campaignId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getCampaignAdSets.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AdSetPayload>>('get',`${this.basePath}/v1/api/advertisers/campaigns/${encodeURIComponent(String(campaignId))}/ad-sets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param adId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getImage(adId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getImage(adId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getImage(adId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getImage(adId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (adId === null || adId === undefined) {
            throw new Error('Required parameter adId was null or undefined when calling getImage.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/v1/api/advertisers/${encodeURIComponent(String(adId))}/images`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save2(body: AdvertiserPayload, observe?: 'body', reportProgress?: boolean): Observable<AdvertiserPayload>;
    public save2(body: AdvertiserPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdvertiserPayload>>;
    public save2(body: AdvertiserPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdvertiserPayload>>;
    public save2(body: AdvertiserPayload, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling save2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AdvertiserPayload>('post',`${this.basePath}/v1/api/advertisers/save`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save3(body: CampaignPayload, observe?: 'body', reportProgress?: boolean): Observable<CampaignPayload>;
    public save3(body: CampaignPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CampaignPayload>>;
    public save3(body: CampaignPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CampaignPayload>>;
    public save3(body: CampaignPayload, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling save3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CampaignPayload>('post',`${this.basePath}/v1/api/advertisers/campaigns/save`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save4(body: AdSetPayload, observe?: 'body', reportProgress?: boolean): Observable<AdSetPayload>;
    public save4(body: AdSetPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdSetPayload>>;
    public save4(body: AdSetPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdSetPayload>>;
    public save4(body: AdSetPayload, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling save4.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AdSetPayload>('post',`${this.basePath}/v1/api/advertisers/campaigns/ad-sets/save`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save5(body: AdPayload, observe?: 'body', reportProgress?: boolean): Observable<AdPayload>;
    public save5(body: AdPayload, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AdPayload>>;
    public save5(body: AdPayload, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AdPayload>>;
    public save5(body: AdPayload, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling save5.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AdPayload>('post',`${this.basePath}/v1/api/advertisers/campaigns/ad-sets/ads/save`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param adId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAdVisitorsCount(adId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAdVisitorsCount(adId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAdVisitorsCount(adId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAdVisitorsCount(adId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (adId === null || adId === undefined) {
            throw new Error('Required parameter adId was null or undefined when calling updateAdVisitorsCount.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/v1/api/advertisers/campaigns/ads/${encodeURIComponent(String(adId))}/visitors/count/update`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
